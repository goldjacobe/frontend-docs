import { Fiddle } from "../components/fiddle"

# CSS: The style of web pages

HTML was great for academic documents, but not great for marketing materials and definitely not great for full applications. People wanted a way to style their documents, and that is how we got CSS. 

Building on our earlier example, let's create a folder with two documents: 

```html filename="index.html" {5}
<!DOCTYPE html>
<html lang="en">
  <head>
    <title>Demo app</title>
    <link rel="stylesheet" type="text/css" href="styles.css" />
  </head>
  <body>
    <p>Hello, world!</p>
  </body>
</html>
```

This is the same as above, but with and added `<link>` tag (which is just telling the browser the address it can request to find the associated CSS file, because the address doesn't begin with a `/` it's presumed to be relative to the HTML file). And:

```css filename="styles.css"
p {
  color: red;
}
```

This is a CSS file! It says that all paragraph tags, `p`, should have a text color of red. 

You can open that HTML file to see it with the style applied. And, like our HTML example, we can continue to experiment using JSFiddle:

<Fiddle url={"//jsfiddle.net/e6mjs3bz/embedded/html,css,result/"} />

## Selectors

CSS is all about selecting elements and modifying their properties. CSS files are structured as lists of these rules, which use a selector to specify element(s) the rule applies to and lists properties to apply to those matched elements. 

```css
/**
 * This is a c-style comment.
 *
 * This paragraph says all paragraph tags should be red. 
 */
p {
  color: red;
}

/* This paragraph says all headings should be bold and blue. */
h1 {
  color: blue;
  font-weight: bold;
}
```

There are three types of selectors: 

- `foo`: this matches all elements of the tag `foo` (for example, `<foo />)
- `#foo`: this matches the element with the attribute `id="foo"`. Every ID must be unique within the document.
- `.foo`: this matches all elements which include the attribute `class="foo"`. Unlike IDs, there can be many elements with the same class; there can also be multiple classes per element, for example, an element with `class="foo bar"` will match both `.foo` and `.bar`.

### Composing selectors

Multiple selectors can apply by using a comma (e.g. `#foo, #bar` applies to either `#foo` OR `#bar`). And selectors can be combined to form an aggregate selector; for example, `p#foo.bar` matches any `p` tags with the ID `foo` and the class `bar`. They can also be combined across elements, for example `.foo .bar` matches any element with class `bar` that is a descendent of an element with class `foo` (similarly `.foo > .bar` matches any element with class `bar` that is a **direct** descendent of an element with class `foo`): 

TODO: JSFIDDLE LINK

### Specificity

If two different selectors apply to an element, the properties in the selector with the most IDs in it wins (for example, `#ID` has 1 ID but `#foo #bar` has two IDs); if both selectors have the same number of IDs, the properties in the selector with the most classes wins; if both selectors have the same number of classes, the properties in the selector with the most tags wins; if both selectors have the same number of tags, the properties in the selector later in the file wins. This is called specificity.  

You may notice I’m saying the properties of that selector, that’s because a selector’s properties may still apply to an element even if it’s not the matching selector with the highest specificity. CSS rules can be thought of as applying from lowest specificity upwards. So, if a rule sets the text color to red, and no higher specificity rule overrides it, the text color will still be red. 

TODO: JSFIDDLE LINK

### Psuedo-selectors

Selectors can also match states. These selectors are prefixed with a colon. For example, `.foo:hover` matches elements with class `.foo` when the mouse hovers over them:

TODO: JSFIDDLE LINK

## Properties

As for properties you can set on a selector, they are all of the form property-name colon property-value (which sometimes includes a unit). For example, 

```jsx
width: 200px
```

- `width`: is the property
- `200px` is the value (`px` is the unit, meaning pixels)

There are a few types of potential values: 

- Enums (e.g. `text-decoration: underline`): are property specific.
- Measurements (e.g. `width: 200px`): take the form of pixels (`px`), inches (`in`), or as a percent of the screen’s height (`vh`). Zero is always unitless (because it’s always the same).
- Colors (e.g. `color: red`): Can either take the form of names (TODO LINK), red / green / blue values represented from 0 to 255 (e.g. `rgb(255, 0, 0)`),  or hex values (`#FF0000`, which is 3 sets of two digit hexadecimal numbers representing red, green, and blue: `#RRGGBB`)

CSS is wonderfully expressive. For example, you can do everything from change the cursor to do 3d transforms. While I can't cover everything CSS can do, some basics you can expect to encounter are:

Typography 

Background properties

### Sizing: the box model

No CSS tutorial would be complete without a discussion of the box model. The box model is a framework for how much space every element takes. By default, most elements have one of three layout kinds:

- Block: the element takes up a whole row (e.g. `<div>`)
- Inline: a selection of text, the element takes up no space beyond the inner text (e.g. `<span>`)
- Inline-block: something that might be laid out alongside other things (has its own width and height, but can have neighbors; e.g. `<img>`)

You can override the layout kind via the `display` property. For example, normally divs don’t show up next to each other, but by changing their `display` to `inline-block` we can get the browser to lay them out next to each other.

For each element, the size of it can be determined by adding: 

- Content: the innermost box that contains the children of the element
- Padding: white space that includes the background
- Border: a line around the padding
- Margin: space outside the border separating the element from adjacent elements.

TODO: Image of box model

Two unintuitive things about this model are: 

1. Margin doesn’t always behave intuitively. Specifically, if you have two boxes next to each other with a margin of 10px, the total margin may not be 20px, it is only 10px (as both are at least 10px away from their neighbors).
2. By default, width and height only define the size of the content. For many developers, this is unintuitive: because they would expect a box with width 200px to have a width of 200px, regardless of how much padding it has. To give developers this option, CSS added the property `box-sizing: border-box`. 

## Layout

Note: even for people who have been doing this a while, there is still a lot of guess and check.

### Flex and Grid

While the box model worked well for documents, it reached limits with applications. For a long time people hacked `<tables>`'s for layout, then `<div>`'s became popular, but ultimately the box model broke down with more complicated UIs. To surmount this, two layouts were introduced: flexbox and grid. While the full APIs are probably more complicated than we have space to get into, there are wonderful tutorials:

- Flexbox: TODO FLEXBOX FROGGY
- Grid: TODO GRID GARDEN

### Positioning

## Browser defaults

Reset.css

## Advanced

### Variables

CSS has gotten more advanced over the years, and you can now specify properties that compose into other properties. 

TODO: JSFIDDLE LINK

As a warning, you can also compute things with `calc` (e.g. `width: calc(80% - 10px)`. In general, I would avoid using this, and I would especially avoid putting variables in it. Calc is rarely necessary and leads to hard to understand code.

### Animations

There are two types of animations you can define in CSS. Transitions, which define how to change between different values of a property: 

TODO: JSFIDDLE LINK

Animations, which animate an object:

TODO: JSFIDDLE LINK

### Psuedo-elements

Selectors can also create elements. For example, `.foo::before` will create an element within all elements with class `foo` but before their children. 

Yes this is weird; an example of when you might use it is to add a bullet point before items in a bullet point list. 

TODO: JSFIDDLE LINK

## Devtools

You might be wondering, is that all it really is? Is every web page written this way? Yes, and I can prove it. If you right click on this page and click “Inspect” you’ll open up your browser’s developer tools panel. 

The developer tools panel includes a variety of tools, but if you open “Elements” you’ll see the full HTML of the webpage, starting with the `<html>` tag (technically this is showing you the DOM, but more on that later). And if you were to hover over an element the browser will highlight it for you:

TODO: IMAGE

If you click it you can see the relevant CSS on the right hand side:

TODO: IMAGE

The style explorer can also show you the computed properties for the element (cascading the CSS for you) and show you the box model like we described above:

TODO: IMAGE

The rest of the tools primarily help you debug any JavaScript running alongside the page, and we’ll get to that in the next chapter. 