{"/":{"title":"👋 Hi! My name is Tomas.","data":{"":"I have been programming for the web for 15+ years, developed reactive frontend frameworks at Facebook, and fucking love JavaScript.In that time, I've had the chance to teach a few people about frontend development; inevitably they'll ask me, \"hey, this is all great, is there anywhere I can go to read more\", or worse, \"I was doing some reading online and read an article that says {some hyperbole about how a certain framework / library / technology solves all problems}. Why don't we just use that?\" And that's when I explain three truths about the frontend ecosystem:\nIt's quickly evolving and highly volatile: what was true last year (/ month / week) may not be true today.\nIt's very hype-driven: because so few technologies have been around to stand the test of time, technology popularity is heavily influenced by marketing hype instead of robustness.\nA lot of the documentation is targeting first time programmers: For whatever reason, frontend attracts a lot of new developers, which is awesome; however, a lot of the documentation excludes context, tradeoffs, and nuance because it assumes the reader won't be able to, or care to, evaluate it themselves.\nThat last point, in particular, upsets me. I think frontend has many real engineering problems to work on, and the lack of experienced-developer-facing documentation discourages many developers from engaging with it.So that's why I'm here: I want to share frontend with you. I wanted to write a document that:\nTeaches frontend: assuming little to no background knowledge.\nTargets experienced developers: including any relevant context, trade-offs, and nuance. If you're just looking to get started, there are better documents for you.\nIs short: I've worked really hard to keep this whole thing front-to-back readable, and under 20 pages.\nPerhaps you're a backend developer dipping your toes into frontend for the first time; perhaps you're a frontend developer who wants to go deeper; perhaps, you've just always been curious. Regardless of the situation, if you've been coding for a while and want to learn more about frontend, this is for you.Lastly, two quick editorial notes:\nWhile I aim to be fair with this, I'm certainly not impartial. My goal is to pass on both my opinions and their reasoning, hopefully allowing you to bootstrap your own.\nThere is a lot to cover and this is very much a work in progress. If you feel I missed something, got it wrong, or just could have gone deeper feel free to DM me on Twitter (link in header).\nAnyway, I only have ~19 pages left, so let's dive in!"}},"/html":{"title":"HTML: The structure of web pages","data":{"":"HTML started as a portable markup language to share academic papers with other people on the same network. Browsers were co-developed as a way to (1) fetch those files, and (2) display them.While the web has changed a lot since then, that core technologies haven't. When you navigate to a URL like google.com/foo/bar.html, the browser requests the shared file foo/bar.html from the server at google.com; if you specify a folder path without a file, the browser will automatically request index.html on your behalf (specifically, the requests google.com/foo/ and google.com/foo/index.html are the same).","a-basic-page#A basic page":"The most basic HTML page you could write looks something like this:\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Demo app</title>\n  </head>\n  <body>\n    <p>Hello, world!</p>\n  </body>\n</html>\nIn this example, we're creating a page that has a single paragraph, <p>, with the text \"Hello, world!\".HTML is a subset of XML, that is to say it encodes the document as a tree of tags; tags can be <opening>, </closing>, or <both />. Every opening tag must have a closing tag, and opening and self-closing tag (what we referred to as \"both\") can have attributes that change the behavior of the tag (for example, <img width=\"800\" /> is an image with a width of 800px).A tag nested within another tag is referred to as a child, and the outer tag is referred to as the parent:\n<parent>\n  <child />\n</parent>\nBuilding on that, the entire nomenclature for family trees applies (there are grandparents, siblings, descendents, etc...)HTML documents begin with a <!DOCTYPE html> declaration that tells the parser the document is HTML (much like a shebang in a scripting language), and consist of at most two children:\nhead: defining the metadata of the document (such as the tab's title)\nbody: defining the contents of the document (such as the paragraph with the text hello world to show)","tags-tags-tags#Tags, tags, tags":"If you were to only know 2 other tags beyond <html>, <title>, and <body> they would definitely be:\n<div>: an arbitrary block of content\n<span>: a way to select text within a block\nWe'll talk about both of these more in the CSS section.There are other common tags to add functionality to the page: <img> for images, <video> for videos, <textarea> for long-form text-input, but we don't need to understand those yet. There are also other tags that encode the purpose of the element: <main>, <article>, <header> (these act the same as a div, but allow bots and accessibility software to more easily read the webpage). My advice with these semantic elements is to use them where you can, but not to stress about them; there are still many, many websites that get along just fine with divs.","try-it-yourself#Try it yourself":"To play with this further, you can use a service like JSFiddle or CodePen, which injects the HTML directly into the body tag (and allows you to define CSS and JS files, but more on that later)."}},"/css":{"title":"CSS: The style of web pages","data":{"":"HTML was great for academic documents, but not great for marketing materials and definitely not great for full applications. People wanted a way to style their documents, and that is how we got CSS.Building on our earlier example, let's create a folder with two documents:\n<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <title>Demo app</title>\n    <link rel=\"stylesheet\" type=\"text/css\" href=\"styles.css\" />\n  </head>\n  <body>\n    <p>Hello, world!</p>\n  </body>\n</html>\nThis is the same as above, but with and added <link> tag (which is just telling the browser the address it can request to find an associated CSS file; because the address doesn't begin with a / it's presumed to be relative to the HTML file). And:\np {\n  color: red;\n}\nThis is a CSS file! It says that all paragraph tags, p, should have a text color of red.You can open that HTML file to see it with the style applied. And, like our HTML example, we can continue to experiment using JSFiddle:","selectors#Selectors":"CSS is all about selecting elements and modifying their properties. CSS files are structured as lists of these rules, which use a selector to specify element(s) the rule applies to and lists properties to apply to those matched elements.\n/**\n * This is a c-style comment.\n *\n * This paragraph says all paragraph tags should be red. \n */\np {\n  color: red;\n}\n/* This paragraph says all headings should be bold and blue. */\nh1 {\n  color: blue;\n  font-weight: bold;\n}\nThere are three types of selectors:\nfoo: this matches all elements of the tag foo (for example, <foo />)\n#foo: this matches the element with the attribute id=\"foo\". Every ID must be unique.\n.foo: this matches all elements which include the attribute class=\"foo\". Unlike IDs, there can be many elements with the same class; there can also be multiple classes per element; for example, an element with class=\"foo bar\" will match both .foo and .bar.","composing-selectors#Composing selectors":"Selectors can also be combined:\nCommas allow either selector to match (e.g. #foo, #bar applies to either #foo or #bar)\nSelectors can be concatenated so ALL selectors must match (e.g. p#foo.bar matches any p tags with the ID foo and the class bar)\nSpaces match descendents (e.g. .foo .bar matches any element with class bar that is a descendent of an element with class foo)\nCombinators can be used to build more complicated relationships (e.g. .foo > .bar matches any element with class bar that is a direct descendent of an element with class foo)","specificity#Specificity":"If two different selectors apply to an element:\nthe properties in the selector with the most IDs in it wins (#foo has 1 ID but #foo #bar has two IDs);\nif both selectors have the same number of IDs, the properties in the selector with the most classes wins;\nif both selectors have the same number of classes, the properties in the selector with the most tags wins;\nif both selectors have the same number of tags, the properties in the selector defined later in the file wins.\nThis is called specificity.CSS rules can be thought of as applying from lowest specificity upwards. So, if a rule sets the text color to red, and no higher specificity rule overrides it (or there is no higher specificity rule), the text color will still be red. (This is where the cascading of Cascading Style Sheets comes from).","psuedo-selectors#Psuedo-selectors":"Selectors can also match states. These selectors are prefixed with a colon. For example, .foo:hover matches elements with class .foo when the mouse hovers over them:","properties#Properties":"As I said, CSS is all about selecting elements and modifying their properties. Properties are all of the form property-name colon property-value (which sometimes includes a unit). For example,\nwidth: 200px\nwidth: is the property\n200px is the value (px is the unit, meaning pixels)\nValues can either be:\nEnums (e.g. text-decoration: underline): which are property specific.\nMeasurements (e.g. width: 200px): that take the form of pixels (px), inches (in), as a percent of the screen’s height (vh), or something else entirely. Zero is always unitless (because it’s always the same).\nPaths to other files (e.g. background-image: url(./file.png)): the value is a filepath relative to the CSS file, and while url() may look like a function, it is just telling CSS the type of the value. The path can either be quoted or unquoted (like bash parameters, the quotes are only important if there is a space).\nColors (e.g. color: red): which either take the form of names (e.g. red) or as triplets of red, green, and blue values (RGB). If you're new to digital graphics, an online color picker is a good way to build intuition mapping colors to RGB (rgb(255, 0, 0)) or hex(adecimal) values (#FF0000). (Note: there are other ways to specify colors, but they are less common.)\nWith CSS properties, you can do everything from change the cursor to full 3d transforms. While I can't cover everything CSS can do, some basics you might encounter are:\nText color: color: red;\nText size: font-size: 12px;\nBold text: font-weight: bold;\nBackground color: background-color: red;","layout#Layout":"One particularly important set of properties are those that effect the size and position of your elements.By default, divs are arranged in one column from the top of the page to the bottom and have the height of their contents. This is one of three default layout kinds:\nblock: the element takes up a whole row (e.g. <div>)\ninline: a selection of text, the element takes up no space beyond the inner content (e.g. <span>)\ninline-block: something that has a height and width, but doesn't need a full row to itself (e.g. <img>)\nYou can override the layout kind via the display property. For example, normally divs don’t show up next to each other, but by changing their display to inline-block we can get the browser to lay them out next to each other.","sizing-the-box-model#Sizing: the box model":"As for how these elements are sized, no CSS tutorial would be complete without a discussion of the box model. The box model is a framework for how much space each element takes.Each element is modeled as four concentric rectangles (or boxes):\nContent: the innermost box that contains the children of the element\nPadding: white space that includes the background\nBorder: a line around the padding\nMargin: space outside the border separating the element from adjacent elements.\nFor each rectangle, you can define all sides at once (padding; 16px), each side individually (padding-left: 16px), or each side individually using a shorthand (padding: 16px 12px 8px 4px defines the top as 16px, right as 12px, bottom as 8px, and left as 4px).The height and width of the content default to whatever height and width the children require to be laid out, but can be explicitly set via the height and width properties (e.g. height: 100px). In addition to specifying a height and width, you can also constrain them using max-height, max-width, min-width, and min-height. For example, an element with the below will be as wide as possible, but not more than 800px:\n.example {\n  width: 100%;\n  max-width: 800px;\n}\nWhile height was intended to define height of the content, many developers assume it refers to height of the element (including the height of contents, padding, and border). For example, a developer that assigns a box a height of 16px and a padding of 4px, might be confused when the height of the element is 24px instead of 16px (4px top padding + 16px height + 4px bottom padding).This confusion was sufficiently widespread (as was the desire to specify the overall height of the element) that css introduced the box-sizing property to allow developers to toggle whether height refers to the height of the content or the height of the element: box-sizing: border-box redefines height as content height + padding height + border height (the same applies to width).So far, we haven't talked much about margin, a word of caution there: many developers shy away from margin because doesn't always behave intuitively. Specifically: if you have two div's on top of each other with a margin of 10px, the total space between them will only be 10px (as both are at least 10px away from their neighbors). This is called margin collapsing.","flex-and-grid#Flex and Grid":"While blocks and inline-blocks worked well for documents, they reached their limits with applications. For a long time people hacked <tables>'s for layout, then <div>'s became popular, but ultimately application UIs demanded something more. As a result, two layouts were introduced: flexbox and grid, which both let you define elements flexibly and in relation to other elements.\nWhile the full APIs are probably more complicated than we have space to get into, there are wonderful tutorials:\nFlexbox: https://flexboxfroggy.com/\nGrid: https://cssgridgarden.com/","positioning#Positioning":"Lastly, sometimes you want to position an element directly (rather than having the browser lay it out for you). In this case, you can position an element relative to:\nits parent: using position: absolute\nthe browser window: using position: fixed","browser-defaults#Browser defaults":"If you don't define a property, the browser will fall back to its default; different tags have different defaults (for example, on Chrome, the <body> has a default padding of 8px). These defaults are not consistent across browsers. As a result, developers will frequently reset these properties themselves, and it is common to see declarations like the below in boilerplate projects:\nhtml, body {\n  padding: 0;\n  margin: 0;\n}\nTo standardize CSS defaults across browsers, the idea of a \"CSS Reset\" was introduced:a stylesheet that overrides browser defaults. One of the more popular resets is normalize.css.","devtools#Devtools":"You might be wondering, is that all it really is? Is every web page written this way? Yes, and I can prove it. If you're using Chrome, right click on this page and click “Inspect” you’ll open up your browser’s developer tools panel (a similar concept exists in most browsers, but I'll be focusing on Chrome's).The developer tools panel includes a variety of tools, but if you open “Elements” you’ll see the full HTML of the webpage, starting with the <html> tag (technically this is showing you the DOM, but more on that later). You can select an element to see its CSS and box model.\nYou can read more about the developer tools panel here; the rest of the tools primarily help you debug any JavaScript running alongside the page, and we’ll get to that in the next chapter.","advanced#Advanced":"There is no way to cover all of CSS in one chapter. There are simply too many properties. Even people who have been working with CSS for years still discover new properties (partially because new properties are also introduced regularly).My goal was to give you enough of a foundation to understand any new properties you run into. To that end, there are a few remaining concepts that could benefit from additional explanation. Here is a whirlwind tour.","media-queries#Media queries":"Media queries allow you to apply different CSS properties based on properties of the medium (most commonly, browser width). This lets you have different designs for, for example, mobile vs desktop.","variables#Variables":"CSS has gotten more advanced over the years, and you can now specify properties that compose into other properties.\nAs a warning, you can also compute things with calc (e.g. width: calc(80% - 10px). In general, I would avoid using this, and I would especially avoid putting variables in it. Calc is rarely necessary and leads to hard to understand code.","animations#Animations":"There are two types of animations you can define in CSS. Transitions, which define how to change between different values of a property:\nAnimations, which animate an object:\nAnimations rely on \"keyframes\": a concept borrowed from animation, you specify the properties at specific points, and let the runtime interpolate the middle state (for example, if you know that a box starts at 10px wide and ends at 20px wide, you can infer that half way through that animation, the box should be 15px wide).","psuedo-elements#Psuedo-elements":"Selectors can also create elements. For example, .foo::before will create an element within all elements with class foo but before their children.Yes this is weird; an example of when you might use it is to add a bullet point before items in a bullet point list."}}}